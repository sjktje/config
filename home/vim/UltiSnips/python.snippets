global !p

def triple_quotes(snip):
    return '"' * 3

endglobal

snippet bsdl
# Copyright (c) `!v strftime("%Y")` Svante Kvarnstr√∂m <sjk@ankeborg.nu>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
endsnippet

snippet auto
${1:FIELDNAME} = models.AutoField(${2})
endsnippet

snippet bool
${1:FIELDNAME} = models.BooleanField(${2:default=True})
endsnippet

snippet char
${1:FIELDNAME} = models.CharField(max_length=${2}${3:, blank=True})
endsnippet

snippet comma
${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${3:, blank=True})
endsnippet

snippet date
${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet datetime
${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet decimal
${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${3})
endsnippet

snippet email
${1:FIELDNAME} = models.EmailField(max_length=${2:75}${3:, blank=True})
endsnippet

snippet file
${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${3:, max_length=100})
endsnippet

snippet filepath
${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${6:, blank=True, })
endsnippet

snippet float
${1:FIELDNAME} = models.FloatField(${2})
endsnippet

snippet image
${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${4:, max_length=100})
endsnippet

snippet int
${1:FIELDNAME} = models.IntegerField(${2})
endsnippet

snippet ip
${1:FIELDNAME} = models.IPAddressField(${2})
endsnippet

snippet nullbool
${1:FIELDNAME} = models.NullBooleanField(${2})
endsnippet

snippet posint
${1:FIELDNAME} = models.PositiveIntegerField(${2})
endsnippet

snippet possmallint
${1:FIELDNAME} = models.PositiveSmallIntegerField(${2})
endsnippet

snippet slug
${1:FIELDNAME} = models.SlugField(max_length=${2:50}${3:, blank=True})
endsnippet

snippet smallint
${1:FIELDNAME} = models.SmallIntegerField(${2})
endsnippet

snippet text
${1:FIELDNAME} = models.TextField(${2:blank=True})
endsnippet

snippet time
${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet url
${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${4:, blank=True})
endsnippet

snippet xml
${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${3:, blank=True})
endsnippet

# Relational Fields
snippet fk
${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, to_field=''})
endsnippet

snippet m2m
${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${7:, db_table=''})
endsnippet

snippet o2o
${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${6:, to_field=''})
endsnippet


# Code Skeletons

snippet form
class ${1:FormName}(forms.Form):
    """${2:docstring}"""
    ${3}
endsnippet


snippet mod
class ${1:ModelName}(models.Model):
    ${2}

    def __str__(self):
	    return ${3}
endsnippet


snippet modeladmin
class ${1:ModelName}Admin(admin.ModelAdmin):
    ${2}

admin.site.register($1, $1Admin)
endsnippet

snippet tabularinline
class ${1:ModelName}Inline(admin.TabularInline):
    model = $1
endsnippet


snippet stackedinline
class ${1:ModelName}Inline(admin.StackedInline):
    model = $1
endsnippet


snippet r2r
return render_to_response('${1:template.html}', {
	    ${2}
    }${3:, context_instance=RequestContext(request)}
)
endsnippet

snippet ae "Assert equal" b
self.assertEqual(${1:first}, ${2:second})
endsnippet

snippet ai "Assert in" b
self.assertIn(${1:first}, ${2:second})
endsnippet

snippet ac "Assert contains" b
self.assertContains(${1:first}, ${2:second})
endsnippet

snippet atu "assertTemplateUsed" b
self.assertTemplateUsed(${1:response}, '${2:template.html}')
endsnippet

snippet def "function with docstring" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    """${3:TODO: docstring}"""
    ${0:pass}
endsnippet

snippet enc "Add file encoding" b
# encoding: utf-8
endsnippet

snippet render "render" i
return render(${1:request}, '${2:template}.html', ${3:context})
endsnippet
