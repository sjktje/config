export CVS_RSH=ssh
export EDITOR=vim
export LC_CTYPE=sv_SE.UTF-8
export TZ=CET
export HISTSIZE=13000
export SAVEHIST=12000
export HISTFILE=~/.history
export PATH=$HOME/bin:/usr/local/opt/ruby/bin:$PATH
export VIMHOME=${HOME}/.vim
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='3;33'
export TEXINPUTS=$TEXINPUTS:${HOME}/lib/LaTeX
export BLOCKTABLE="attackers"

if [[ -n "$ZSHRUN" ]]
then
  HISTFILE=~/.zrunhistory
elif [[ "$HINDI" = "" ]]
then
  HISTFILE=~/.history
else
  unset HISTFILE
  fc -R ~/.history
fi

if [[ `uname -s` == "OpenBSD" ]]; then
	export PKG_PATH="ftp://ftp.su.se/pub/OpenBSD/`uname -r`/packages/`uname -m`/"
	export CVSROOT=anoncvs@anoncvs.se.openbsd.org:/cvs
fi

# Colours
autoload -U colors
colors

# Git {{{
ZSH_THEME_GIT_PROMPT_PREFIX="%{$reset_color%}%{$fg[red]%}‹"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg[red]%}›%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$reset_color%}%{$fg[yellow]%}∗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_ADDED="%{$reset_color%}%{$fg[green]%}✓%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# get the name of the branch we are on
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

# Checks if working tree is dirty
parse_git_dirty() {
  if [[ -n $(git status -s --ignore-submodules=dirty 2> /dev/null) ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  else
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi
}

# }}}

# I am not completely happy with the following block. Might enable it
# again later.
#if [[ `uname -n` != "krypton.local" && -z "$TMUX" && $USER != "root" ]]; then
#	tmux attach || tmux new;
#fi

alias srsync='rsync -zPe ssh'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# No colour support on OpenBSD ls
if [[ `uname -s` != "OpenBSD" ]]; then
	alias ls='ls -G'
fi

alias cdrkh='cd ~/Documents/Skola/RKH'
alias cdgit='cd /pub/git'
alias svspell='aspell -l sv check'
alias ukspell='aspell -l en check'
alias svtexspell='aspell -l sv -t check'
alias uktexspell='aspell -l en -t check'

alias syncsite=syncsite2
alias syncsite1='rsync -auzP --delete-after /Users/sjk/sjksite/ sjksite@82.103.130.62:htdocs/'
alias syncsite2='rsync -auzP --exclude=.git --exclude=config.php --delete-after /Users/sjk/sjksite/ sjk@shell.slashbox.net:sites/sjk.ankeborg.nu/'
alias syncsite3='rsync -auzP --delete-after /Users/sjk/sjksite/ sjksite@werther.log2x.nu:htdocs/'

alias syncbth='rsync -auzP --delete-after --exclude=.git /Users/sjk/bth/ svkv11@ssh.student.bth.se:www/'

alias syncrkh='rsync -auzP --delete-after /Users/sjk/Documents/Skola/RKH sjk@slashbox:.'
alias syncworkouts='rsync -auzP --delete-after /Users/sjk/Documents/workouts*.numbers sjk@slashbox:.'
alias syncrkhstick='rsync -rtvPL --modify-window=2 --delete-after /Users/sjk/Documents/Skola/RKH /Volumes/SJK\ RKH'
alias rsmirror='rsync --delete-after -azP'
alias syncmusic='rsync -rtvPL /Users/sjk/Music/iTunes/iTunes\ Music /Volumes/Nokia\ N900/'

alias bbackupquery='bbackupquery -c /usr/local/etc/box/clients/boxbackup.vanbaak.info/bbackupd.conf'
alias bbackupctl='bbackupctl -c /usr/local/etc/box/clients/boxbackup.vanbaak.info/bbackupd.conf'

alias bigfiles='ls -fld ./**/*(d`stat +device . `OL[1,100])'

alias tdpf='tcpdump -n -e -tttt -r /var/log/pflog'
alias tdpfi='tcpdump -n -e -tttt -i pflog0'

alias dvdleft='echo $(( ( 4700000000 - $( du -s . | sed "s/[^0-9]//g" ) ) /1024.0/1024.0))'

alias mkiso='mkisofs -r -o'
alias burniso='cdrecord -v -eject dev=1,0,0'

alias lockmac='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

alias stfu='osascript -e "set volume output muted true"'
alias hidedesktop='defaults write com.apple.finder CreateDesktop -bool false && killall Finder'
alias showdesktop='defaults write com.apple.finder CreateDesktop -bool true && killall Finder'

# Make the Terminal icon bounce. Sometimes useful, like:
# execute_timey_wimey_command && termbounce
# Then minimize terminal and it'll bounce when done.
alias termbounce='tput bel'

# Remove downloads older than 30 days.
alias rmdl30='find ~/Downloads -mtime +30 -exec rm -rf "{}" \;'

if [[ `uname -s` == "Darwin" ]]; then
    alias pubkeycp='cat ~/.ssh/id_dsa.pub |pbcopy |echo "Public key copied to clipboard."'
	alias hibernateon='sudo pmset -a hibernatemode 5'
	alias hibernateoff='sudo pmset -a hibernatemode 0'
fi

# Using another output directory causes problems with bibtex. Will use this
# again when I have figured out how to make bibtex use the same directory.
#alias pdflatex='mkdir -p tmp; pdflatex -output-directory tmp'
alias latmk='pdflatex main && pdflatex main && pdflatex main && open main.pdf'
alias latbibmk='pdflatex main && bibtex main && pdflatex main && pdflatex main && open main.pdf'
alias latclean='for a in {aux,bbl,blg,brf,out,log,toc}; do echo *.$a; done'



alias t='todo.sh -t'
alias -s {avi,flv,mpg,mpeg,wmv,mp4,mov}=/Applications/VLC.app/Contents/MacOS/VLC
alias -s txt=vim
alias -s html=firefox
alias -s pdf=open
alias -s tar="tar xf"
alias -s gz="gunzip"
alias -s bz2="bunzip2"
alias -s tgz="tar zxvf"
alias -s tbz2="tar jxvf"
alias -s zip="unzip"



function dk() { cd ~/Documents/Skola/RKH/DK${1} }
function ff() { find . -type f -iname '*'$*'*' -ls; }
function fe() { find . -type f -iname '*'$1'*' -exec "${2:-file}" {} \; ; }
function fd() { find . -type d -iname '*'$*'*' -ls; }
function bytetombit() { echo $(( $1/1024.0**2*8 )) }
function mbittobyte() { echo $(( $1*1024.0**2/8 )) }
function texpdf() { pdflatex ${1}.tex && open ${1}.pdf }
function cl() { cd ${1} && ls }
function 6p() {
	ret=$(curl -s -F "content=<${1--}" -F ttl=604800 -w "%{redirect_url}\n" -o /dev/null https://p.6core.net/;)

	if [[ `uname -s` == "Darwin" ]]; then
		echo $ret |pbcopy
		echo "Copied url (${ret}) to clipboard."
	else
		echo "${ret}"
	fi
}

function newgitrepo() {
	if [ -d $1 ]; then
		echo "Repo $1 does already exist."
		return
	fi

	mkdir /pub/git/${1}
	pushd
	cd /pub/git/${1}
	git init --bare
	mv hooks/post-update.sample hooks/post-update
	chmod +x hooks/post-update
	vim description
	popd
}

function title {
  [ "$DISABLE_AUTO_TITLE" != "true" ] || return
  if [[ "$TERM" == screen* ]]; then
    print -Pn "\ek$1:q\e\\" #set screen hardstatus, usually truncated at 20 chars
  elif [[ "$TERM" == xterm* ]] || [[ $TERM == rxvt* ]] || [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
    print -Pn "\e]2;$2:q\a" #set window name
    print -Pn "\e]1;$1:q\a" #set icon (=tab) name (will override window name on broken terminal)
  fi
}

#Appears when you have the prompt
function title_precmd {
  title "%15<...<%~%<<" "%n@%m: %~"
}

#Appears at the beginning of (and during) of command execution
function title_preexec {
  emulate -L zsh
  setopt extended_glob
  local CMD=${1[(wr)^(*=*|sudo|ssh|-*)]} #cmd name only, or if this is sudo or ssh, the next cmd
  title "$CMD" "%100>...>$2%<<"
}

autoload -U add-zsh-hook
add-zsh-hook precmd  title_precmd
add-zsh-hook preexec title_preexec

#function title {
#  if [[ $TERM == "screen" ]]; then
#    # Use these two for GNU Screen:
#    print -nR $'\033k'$1$'\033'\\
#
#    print -nR $'\033]0;'$2$'\a'
#  elif [[ $TERM == "xterm" || $TERM == "rxvt" ]]; then
#    # Use this one instead for XTerms:
#    print -nR $'\033]0;'$*$'\a'
#  fi
#}
#
#function precmd {
#  title zsh "$PWD"
#}
#
#function preexec {
#  emulate -L zsh
#  local -a cmd; cmd=(${(z)1})
#  title $cmd[1]:t "$cmd[2,-1]"
#}

# Completion
zmodload zsh/complist
autoload -U compinit && compinit
### If you want zsh's completion to pick up new commands in $path automatically
### comment out the next line and un-comment the following 5 lines
zstyle ':completion:::::' completer _complete _approximate
#_force_rehash() {
#  (( CURRENT == 1 )) && rehash
#  return 1 # Because we didn't really complete anything
#}
#zstyle ':completion:::::' completer _force_rehash _complete _approximate
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes

# Correction
# 21:22.38 < sjk> setopt correctall is evil
# 21:23.13 < ft> Yes. Yes, it is.
# 21:25.52 < sjk> Should one replace setopt correctall with something else, or should one just remove it?
# 21:26.06 < ft> Get rid of it.
#setopt correctall

unsetopt beep			# I don't like beeps
setopt extendedglob		# Nice fancy globbing

# Prompt
autoload -U promptinit
promptinit
prompt elite2
PROMPT='%{$fg[green]%}(%n@%m) %2~ $(git_prompt_info)%{$reset_color%}%(?:%{$fg[blue]%}:$fg[red])%(!.#.%%) %{$reset_color%}'

autoload -U zsh/stat

bindkey '^K' kill-whole-line
bindkey "^R" history-incremental-search-backward
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line

eval "$(hub alias -s)"

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
