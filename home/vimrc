" sjks .vimrc
" {{{ Setup
set nocompatible
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin on
filetype plugin indent on
syntax on
" }}}
" {{{ Options
set history=50			" Keep 50 lines of command line history.
set ts=4
set si				" Smart indent
set cindent			" Do c-style indenting
set expandtab			" I don't like tabs anymore.
"set smarttab			" Use tabs at the start of a line, spaces elsewhere
set shiftwidth=4
set softtabstop=4
set tabstop=8
set history=50
set ai
set bs=2
set ruler			" ruler enables the line count etc thing at the bottom of the window.
set nowrap			" Don't wrap text at window width
set nohlsearch			" Don't make search results red
set incsearch			" But do hilight as you type search phrase
set noerrorbells		" don't make noise
set foldenable			" Enable {{{ folding }}}
set foldmethod=marker	        " Fold stuff within {{{ and }}}
set showmatch			" show matching brackets
set mat=5			" how many tenths of a second to blink matching brackets for
set pastetoggle=<F2>
set grepprg=grep\ -nH\ $*       " Required by Latex-Suite
set textwidth=78		" I like 80 char long rows.
set ignorecase                  " Make ctrl-n (and others) ignore case.
set infercase                   " Make 'Compl' complete to 'Complete' instead of 'complete'.
set dictionary=/Users/sjk/Documents/Wordlists/ssk.txt
set complete=.,k,w,b,u,t,i      "Including 'k' looks for completions in our wordlist(s)
set title                       " update the terminal's title
set scrolloff=4                 " keep four lines above cursor when scrolling
set clipboard=unnamed           " Yank to OS X's clipboard
set nojoinspaces                " I don't want double spaces after periods when joining lines
set cursorline                  " Hilight the current line
set number			" Show line numbers
set laststatus=2                " Always show status line
set statusline=                                 " Override default
set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=\                               " Set ending space
let html_use_css = 1            " the ':%TOhtml' command generates html without <font> tags
let mapleader=","
syntax enable			" syntax hilighting is nice
" }}}
" {{{ Colors
"colo elflord			" change the colorscheme to 'elflord'. Murphy is cool too, though.
"colo desert			" And desert is too.
"colo slate                     " why not try slate for a while?
colo mustang
highlight Folded guibg=Black guifg=blue
highlight FoldColumn guibg=darkgrey guifg=white
" }}}
"{{{ Mappings
" ,ev and ,sv edits and reloads vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>l :ls<CR>:b<space>

" Reformat current paragraph (or selected text) with Q
vmap Q gq
nmap Q gqap

" Switch windows easily
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" :w!! writes file using sudo
cmap w!! w !sudo tee % >/dev/null
"}}}
" Autocommands {{{1
augroup autowrites " {{{2
    autocmd BufWrite *.pl %s/\(changed\s\+\)=> '.*/\="\1=> '" . strftime("%c") . "',"/e
augroup end " 2}}}
augroup filetypes " {{{2
    " I use two character shift width when editing html
    autocmd FileType html setlocal shiftwidth=2 tabstop=2
augroup end
augroup onnewfile " {{{2
    " Try to find a template for our new file.
    autocmd BufNewFile * silent! 0r $VIMHOME/templates/%:e.tpl
augroup end
" 1}}}
" Functions {{{1
" Named serial inc {{{2
function! UPDSERIAL(date, num)
	if (strftime("%Y%m%d") == a:date)
		return a:date . a:num+1
	endif
	return strftime("%Y%m%d") . '01'
endfunction

command Soa :%s/\(2[0-9]\{7}\)\([0-9]\{2}\)\s*;\s*serial/\=UPDSERIAL(submatch(1), submatch(2)) . '; serial'/gc
" 2}}}
" Tab completion {{{2
"Use TAB for completing words.
"function! Tab_Or_Complete()
"    if col('.')>1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
"        return "\<C-N>"
"    else
"        return "\<Tab>"
"    endif
"endfunction
"
":inoremap<Tab> <C-R>=Tab_Or_Complete()<CR>
"2}}}
" Word processor mode {{{2
" Enter 'Word processor mode' by hitting :WP
" See http://www.drbunsen.org/writing-in-vim.html for mor information.
function! WordProcessorMode()
    set formatprg=par
    setlocal wrap
    setlocal linebreak
    colo iawriter
    set background=light
    set fuoptions=background:#00f5f6f6
endfunction
com! WP cal WordProcessorMode()
" 2}}}
command FixQuotes :%s/"\(\_.\{-}\)"/``\1''/g " Replace quotes with LaTeX friendly ones
"1}}}
"{{{ Plugin settings
let g:tex_flavor='latex'
let g:jekyll_path='/Users/sjk/Code/blog'
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
let g:snips_author='Svante Kvarnstr√∂m'
let g:gist_clip_command = 'pbcopy'
"}}}

source $VIMHOME/autocorrect.vim          " Common misspellings
