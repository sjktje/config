" sjks .vimrc
" {{{ Setup
set nocompatible
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin on
filetype plugin indent on
syntax on
" }}}
" {{{ GUI options
if has('gui_running')
    set guifont=Anonymice\ Powerline
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
endif
" }}}
" {{{ Options
set history=50			" Keep 50 lines of command line history.
set ts=4
set si				" Smart indent
set cindent			" Do c-style indenting
set expandtab			" I don't like tabs anymore.
"set smarttab			" Use tabs at the start of a line, spaces elsewhere
set shiftwidth=4
set softtabstop=4
set tabstop=8
set history=50
set ai
set bs=2
set ruler			" ruler enables the line count etc thing at the bottom of the window.
set nowrap			" Don't wrap text at window width
set nohlsearch			" Don't make search results red
set incsearch			" But do hilight as you type search phrase
set noerrorbells		" don't make noise
set foldenable			" Enable {{{ folding }}}
set foldmethod=marker	        " Fold stuff within {{{ and }}}
set showmatch			" show matching brackets
set mat=5			" how many tenths of a second to blink matching brackets for
set pastetoggle=<F2>
set grepprg=grep\ -nH\ $*       " Required by Latex-Suite
set textwidth=78		" I like 80 char long rows.
set ignorecase                  " Make ctrl-n (and others) ignore case.
set infercase                   " Make 'Compl' complete to 'Complete' instead of 'complete'.
set dictionary=/Users/sjk/Documents/Wordlists/ssk.txt
set complete=.,k,w,b,u,t,i      "Including 'k' looks for completions in our wordlist(s)
set title                       " update the terminal's title
set scrolloff=4                 " keep four lines above cursor when scrolling
set clipboard=unnamed           " Yank to OS X's clipboard
set nojoinspaces                " I don't want double spaces after periods when joining lines
set cursorline                  " Hilight the current line
set number			" Show line numbers
set laststatus=2                " Always show status line
set statusline=                                 " Override default
set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=\                               " Set ending space
set shortmess+=I                 " Disable vim welcome screen
"set spell                       " I prefer to enable this manually
set spelllang=en_gb,sv
set hidden                      " Make vim work like all other editors...
let html_use_css = 1            " the ':%TOhtml' command generates html without <font> tags
let mapleader=","
syntax enable			" syntax hilighting is nice
set list
set listchars=tab:▸\ ,eol:¬
" }}}
" {{{ Colors
"colo elflord			" change the colorscheme to 'elflord'. Murphy is cool too, though.
"colo desert			" And desert is too.
"colo slate                     " why not try slate for a while?
" colo mustang
colo badwolf
"highlight Folded guibg=Black guifg=blue
"highlight FoldColumn guibg=darkgrey guifg=white
" }}}
"{{{ Mappings

" The following mapping is taken from Steve Losh's vimrc (which is available
" at https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc). It turns the
" current word into UPPERCASE.
inoremap <C-u> <esc>mzgUiw`za

" Quick editing
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>es :vsplit ~/.ssh/config<cr>
nnoremap <leader>ez :vsplit ~/config/home/zshrc<cr>

" Jekyll.vim convenience mappings
map <leader>jb :JekyllBuild<cr>
map <leader>jn :JekyllPost<cr>
map <leader>jl :JekyllList<cr>

" Fugitive convenience mappings
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>ga :Gwrite<cr>
nmap <leader>gw :Gwrite<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gp :!git push<cr>
nmap <leader>gb :!hub browse<cr>

" LaTeX-work mappings
nmap <leader>lm :w<cr> :make viewpdf<cr>

" NERDTree convenience mappings
map <leader>nt :NERDTreeToggle<cr>

" Sane search regexps
nnoremap / /\v
vnoremap / /\v

" Reformat current paragraph (or selected text) with Q
vmap Q gq
nmap Q gqap

" Use this to add newline chars to latex table lines and tab them correctly
vmap <leader>t :s,$,\\\\, | :Tab /&<cr>

" Switch windows easily
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Go to beginning/end of lines
noremap H ^
noremap L $
vnoremap L g_

" :w!! writes file using sudo
cmap w!! w !sudo tee % >/dev/null

nnoremap <F5> :GundoToggle<CR>

nnoremap _hd :set ft=htmldjango<CR>
nnoremap _pd :set ft=python.django<CR>

" ;q instead of :q means one less key to hit when quitting, etc.
nnoremap ; :

" Fold html tags
nnoremap <leader>ft Vatzf

" jj takes us to normal mode
inoremap jj <ESC>

" Open a vertical split and switch focus to it
nnoremap <leader>w <C-w>v<C-w>l
"}}}
" Autocommands {{{1
augroup autowrites " {{{2
    autocmd BufWrite *.pl %s/\(changed\s\+\)=> '.*/\="\1=> '" . strftime("%c") . "',"/e
augroup end " 2}}}
augroup ft_html " {{{2
    autocmd!
    autocmd BufNewFile,BufRead admin.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead urls.py     setlocal filetype=python.django
    autocmd BufNewFile,BufRead models.py   setlocal filetype=python.django
    autocmd BufNewFile,BufRead views.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead settings.py setlocal filetype=python.django
    autocmd BufNewFile,BufRead forms.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead *.html setlocal filetype=htmldjango
    autocmd FileType html,htmldjango setlocal foldmethod=manual
    autocmd FileType htmldjango inoremap <buffer> <c-t> {%<space><space>%}<left><left><left>
    autocmd FileType htmldjango inoremap <buffer> <c-b> {{<space><space>}}<left><left><left>
    autocmd FileType php,htmldjango runtime! ftplugin/html/sparkup.vim
augroup end " 2}}}
augroup filetypes " {{{2
    autocmd FileType html,htmldjango setlocal shiftwidth=2 softtabstop=2 tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2 tabstop=2
    autocmd FileType bib setlocal fdm=syntax
augroup end
" augroup onnewfile " {{{2
"     " Try to find a template for our new file.
"     autocmd BufNewFile * silent! 0r $VIMHOME/templates/%:e.tpl
" augroup end
" 1}}}
" Functions {{{1
" Named serial inc {{{2
function! UPDSERIAL(date, num)
	if (strftime("%Y%m%d") == a:date)
		return a:date . a:num+1
	endif
	return strftime("%Y%m%d") . '01'
endfunction

command Soa :%s/\(2[0-9]\{7}\)\([0-9]\{2}\)\s*;\s*serial/\=UPDSERIAL(submatch(1), submatch(2)) . '; serial'/gc
" 2}}}
" Tab completion {{{2
"Use TAB for completing words.
"function! Tab_Or_Complete()
"    if col('.')>1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
"        return "\<C-N>"
"    else
"        return "\<Tab>"
"    endif
"endfunction
"
":inoremap<Tab> <C-R>=Tab_Or_Complete()<CR>
"2}}}
" Word processor mode {{{2
" Enter 'Word processor mode' by hitting :WP
" See http://www.drbunsen.org/writing-in-vim.html for mor information.
"function! WordProcessorMode()
"    set formatprg=par
"    setlocal wrap
"    setlocal linebreak
"    colo iawriter
"    set background=light
"    set fuoptions=background:#00f5f6f6
"endfunction
"com! WP cal WordProcessorMode()
" 2}}}
" Highlight Word {{{
" The following function was shamelessly ripped from Steve Losh's vimrc at
" https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc.
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction " }}}

" Mappings {{{

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

" }}}
" Default Highlights {{{

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

" }}}
command FixQuotes :%s/"\(\_.\{-}\)"/``\1''/g " Replace quotes with LaTeX friendly ones
"1}}}
"{{{ Plugin settings
"{{{ TeX
let g:tex_flavor='latex'
let g:tex_fold_enabled=1 " This might not be a plugin setting.
"}}}
"{{{ Jekyll
let g:jekyll_path='/Users/sjk/Code/blog'
"}}}
"{{{ Surround
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
"}}}
"{{{ Gist
let g:gist_clip_command = 'pbcopy'
"}}}
"{{{ NERDTree
let NERDTreeIgnore=['\~$', '\.aux$', '\.bbl$', '\.bcf$', '\.blg$', '\.pdf$', '\.run\.xml$', '\.toc$', '\.out$', '\.pyc$']
"}}}
"{{{ Airline
let g:airline_theme='badwolf' " Status bar theme
let g:airline_powerline_fonts = 1
"}}}
"{{{ Python-mode
let g:pymode_doc = 1
let g:pymode_doc_key = 'M'
let g:pydoc = 'pydoc'
let g:pymode_syntax = 1
let g:pymode_syntax_all = 0
let g:pymode_syntax_builtin_objs = 1
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_run = 0
let g:pymode_lint = 0
let g:pymode_breakpoint = 0
let g:pymode_utils_whitespaces = 0
let g:pymode_virtualenv = 0
let g:pymode_folding = 1

let g:pymode_options_indent = 0
let g:pymode_options_fold = 0
let g:pymode_options_other = 0
let g:pymode_options = 0

let g:pymode_rope = 1
let g:pymode_rope_global_prefix = "<localleader>R"
let g:pymode_rope_local_prefix = "<localleader>r"
let g:pymode_rope_auto_project = 1
let g:pymode_rope_enable_autoimport = 0
let g:pymode_rope_autoimport_generate = 1
let g:pymode_rope_autoimport_underlineds = 0
let g:pymode_rope_codeassist_maxfixes = 10
let g:pymode_rope_sorted_completions = 1
let g:pymode_rope_extended_complete = 1
let g:pymode_rope_autoimport_modules = ["os", "shutil", "datetime"]
let g:pymode_rope_confirm_saving = 1
let g:pymode_rope_vim_completion = 1
let g:pymode_rope_guess_project = 1
let g:pymode_rope_goto_def_newwin = 0
let g:pymode_rope_always_show_complete_menu = 0
"}}}
"}}}
" Source external files {{{1
    "source $VIMHOME/autocorrect.vim          " Common misspellings
"1}}}
