" sjks .vimrc
" Setup {{{1
set nocompatible
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin on
filetype plugin indent on
syntax on

" GUI Options {{{1
if has('gui_running')
    set guifont=Anonymice\ Powerline:h14
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
endif

autocmd! GUIEnter * set vb t_vb=

" {{{1 Settings
set history=50			" Keep 50 lines of command line history.
set ts=4
set si				" Smart indent
set cindent			" Do c-style indenting
set expandtab			" I don't like tabs anymore.
"set smarttab			" Use tabs at the start of a line, spaces elsewhere
set shiftwidth=4
set softtabstop=4
set tabstop=8
set history=50
set ai
set bs=2
set ruler			" ruler enables the line count etc thing at the bottom of the window.
set nowrap			" Don't wrap text at window width
set nohlsearch			" Don't make search results red
set incsearch			" But do hilight as you type search phrase
set noerrorbells		" don't make noise
set foldenable			" Enable {{{ folding }}}
set foldmethod=marker	        " Fold stuff within {{{ and }}}
set showmatch			" show matching brackets
set mat=5			" how many tenths of a second to blink matching brackets for
set pastetoggle=<F2>
set grepprg=grep\ -nH\ $*       " Required by Latex-Suite
set textwidth=78		" I like 80 char long rows.
set ignorecase                  " Make ctrl-n (and others) ignore case.
set infercase                   " Make 'Compl' complete to 'Complete' instead of 'complete'.
set dictionary=/Users/sjk/Documents/Wordlists/ssk.txt
set complete=.,k,w,b,u,t,i      "Including 'k' looks for completions in our wordlist(s)
set title                       " update the terminal's title
set scrolloff=4                 " keep four lines above cursor when scrolling
set clipboard=unnamed           " Yank to OS X's clipboard
set nojoinspaces                " I don't want double spaces after periods when joining lines
set cursorline                  " Hilight the current line
set number			" Show line numbers
set laststatus=2                " Always show status line
set statusline=                                 " Override default
set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=\                               " Set ending space
set shortmess+=I                 " Disable vim welcome screen
set spell
set spelllang=sv,en_gb,fr
set hidden                      " Make vim work like all other editors...
let html_use_css = 1            " the ':%TOhtml' command generates html without <font> tags
let mapleader=","
let maplocalleader=";"
syntax enable			" syntax hilighting is nice
set list
set listchars=tab:▸\ ,eol:¬,trail:⌴
set bg=dark
set tags=tags

" Resize splits when the window is resized
au VimResized * :wincmd =

" {{{2 Trailing whitespace
" Don't show trailing whitespace in insert mode.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END

" Colorschemes {{{1
"colo elflord			" change the colorscheme to 'elflord'. Murphy is cool too, though.
"colo desert			" And desert is too.
"colo slate                     " why not try slate for a while?
" colo mustang
" colo badwolf
colo solarized
"highlight Folded guibg=Black guifg=blue
"highlight FoldColumn guibg=darkgrey guifg=white

" Mappings {{{1

" The following mapping is taken from Steve Losh's vimrc (which is available
" at https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc). It turns the
" current word into UPPERCASE.
inoremap <C-u> <esc>mzgUiw`za

" Clean trailing whitespace
nnoremap <leader>wss mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Again, from Steve Losh. Close all folds, open the one containing current
" line and pulse it.
nnoremap <c-z> mzzMzvzz15<c-e>`z:Pulse<cr>

" gp to select pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Quick editing
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>es :vsplit ~/.ssh/config<cr>
nnoremap <leader>ez :vsplit ~/config/home/zshrc<cr>
nnoremap <leader>et :vsplit ~/Dropbox/todo/todo.txt<cr>

" Effortless and quick changing of buffers!
nnoremap <leader>b :CtrlPBuffer<cr>

" Sane mapping for omnicomplete
inoremap <S-TAB> <C-X><C-O>

" Source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Toggle folds with the space bar
nnoremap <Space> za
vnoremap <Space> za

" Split lines - opposite of J. From Steve Losh.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Toggle spell checking
nmap <silent> <leader>s :set spell!<cr>

" Delete to end of line
nmap D d$

" Tabs and buffers
nmap <leader>T :enew<cr>
nmap <leader>l :bnext<cr>
nmap <leader>h :bprevious<cr>

" Grep lecture notes
command! -nargs=1 Ngrep vimgrep "<args>" $NOTES_DIR/**/*.md
nnoremap <leader>[ :Ngrep 

" Close current buffer and move to prev
nmap <leader>bq :bp <BAR> bd #<cr>

" Show open buffers
nmap <leader>bl :ls<cr>

" Word mode
nnoremap <leader>wm :set tw=0 wrap linebreak<cr>

" Writeroom {{{2
let g:writeroom = 0
function! WriteRoom()
   if has("gui_running")
      if g:writeroom == 0
         let g:writeroom = 1
         set columns=80
         set fullscreen
         set linebreak
         set nocursorline
         set nolist
         set nonumber
         set noshowmode
         set transparency=0
         hi NonText guifg=bg
      else
         let g:writeroom = 0
         set cursorline
         set list
         set nofullscreen
         set nolinebreak
         set number
         set rulerformat=
         set showmode
         hi clear
      endif
   endif
endfunction

nmap gw :exe WriteRoom()<cr>
imap <leader>w <esc>:exe WriteRoom()<cr>i

" Jekyll.vim convenience mappings {{{2
map <leader>jb :JekyllBuild<cr>
map <leader>jn :JekyllPost<cr>
map <leader>jl :JekyllList<cr>

" Fugitive convenience mappings {{{2
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>ga :Gwrite<cr>
nmap <leader>gw :Gwrite<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gd :Gdiff<cr>
" nmap <leader>gp :cd %:p:h<cr>; !git push<cr>;cd -<cr>
nmap <leader>gb :!hub browse<cr>

" LaTeX-work mappings {{{2
nmap <leader>lm :w<cr> :make viewpdf<cr>
command FixQuotes :%s/"\(\_.\{-}\)"/``\1''/g " Replace quotes with LaTeX friendly ones

syn match texTextcite "\\textcite{[^}]}" containedin=texStatement contains=@NoSpell
syn match texParencite "\\parencite{[^}]}" containedin=texStatement contains=@NoSpell
syn match texCiteauthor "\\citeauthor{[^}]}" containedin=texStatement contains=@NoSpell
syn match texCiteyear "\\citeyear{[^}]}" containedin=texStatement contains=@NoSpell

" NERDTree convenience mappings {{{2
map <leader>nt :NERDTreeToggle<cr>
map <leader>nf :NERDTreeFind<cr>
"2}}}

" Vimux mappings {{{2
" Run py.test
map <leader>rpt :call VimuxRunCommand("clear; py.test " . bufname("%"))<cr>

" Run last command executed by VimuxRunCommand
map <leader>vl :VimuxRunLastCommand<cr>

" Prompt for a command to run
map <leader>vp :VimuxPromptCommand<cr>

" Zoom tmux runner
map <leader>vz :VimuxZoomRunner<cr>

" Inspect runner pane
map <leader>vi :VimuxInspectRunner<cr>

" Close runner
map <leader>vq :VimuxCloseRunner<cr>

" git push
map <leader>gp :call VimuxRunCommandInDir("git push", 0)<cr>
map <leader>gph :call VimuxRunCommandInDir("git push heroku master", 0)<cr>

function! VimuxSlime()
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
endfunction

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <localleader>vs "vy :call VimuxSlime()<CR>

" Select current paragraph and send it to tmux
nmap <localleader>vs vip<LocalLeader>vs<CR>
" 2}}}

" ABC
nmap <leader>ap :call Abc2midi()<CR>
function! Abc2midi()
    let midi_file_name = shellescape(expand("%:p:r").'.mid')
    let abc_file_name = shellescape(expand("%:p"))
    write
    let cmd = 'abc2midi '.abc_file_name.' -o ' . midi_file_name
    call VimuxRunCommand(cmd)
    " silent call system(cmd)
    let play_cmd = 'timidity '.midi_file_name
    call VimuxRunCommand(play_cmd)
    " silent call system(play_cmd)
    let rm_cmd = 'rm '.midi_file_name
    call VimuxRunCommand(rm_cmd)
    " silent call system(rm_cmd)
endfunction

nmap <leader>av :call Abcm2ps()<CR>
function! Abcm2ps()
    let abc_file_name = shellescape(expand("%:p"))
    let ps_file_name = shellescape(expand("%:p:r").'.ps')
    write
    let cmd = 'abcm2ps -O= '.abc_file_name.' && open '.ps_file_name.' && rm '.ps_file_name
    " call VimuxRunCommand(cmd)
    call system(cmd)
    " let rm_cmd = 'rm '.ps_file_name
    " call VimuxRunCommand(rm_cmd)
    " call system(rm_cmd)
endfunction

" Sane search regexps
nnoremap / /\v
vnoremap / /\v

" Reformat current paragraph (or selected text) with Q
vmap Q gq
nmap Q gqap

" Use this to add newline chars to latex table lines and tab them correctly
vmap <leader>t :s,$,\\\\, | :Tab /&<cr>

" Attempt to fix abc file
noremap <leader>abc :%s/ \| /\|/ge <Bar> %s/\|: /\|:/ge <Bar> %s/ :\|/:\|/e <Bar> %s/ \|1 /\|1/ge <Bar> %s/ \|2 /\|2/ge <Bar> %s/ \|\|/\|\|/ge <cr>

" Switch windows easily
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Go to beginning/end of lines
noremap H ^
noremap L $
vnoremap L g_

" :w!! writes file using sudo
cmap w!! w !sudo tee % >/dev/null

nnoremap <F5> :GundoToggle<CR>

nnoremap _hd :set ft=htmldjango<CR>
nnoremap _pd :set ft=python.django<CR>

" ;q instead of :q means one less key to hit when quitting, etc.
nnoremap ; :

" Fold html tags
nnoremap <leader>ft Vatzf


" jj takes us to normal mode
inoremap jj <ESC>
inoremap JJ <ESC>

" Open a vertical split and switch focus to it
nnoremap <leader>w <C-w>v<C-w>l
" Autocommands {{{1
augroup autowrites " {{{2
    autocmd BufWrite *.pl %s/\(changed\s\+\)=> '.*/\="\1=> '" . strftime("%c") . "',"/e
augroup end
augroup ft_html " {{{2
    autocmd!
    autocmd BufNewFile,BufRead admin.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead urls.py     setlocal filetype=python.django
    autocmd BufNewFile,BufRead models.py   setlocal filetype=python.django
    autocmd BufNewFile,BufRead views.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead settings.py setlocal filetype=python.django
    autocmd BufNewFile,BufRead forms.py    setlocal filetype=python.django
    autocmd BufNewFile,BufRead *.html setlocal filetype=htmldjango
    autocmd FileType html,htmldjango setlocal foldmethod=manual
    autocmd FileType php,htmldjango runtime! ftplugin/html/sparkup.vim
augroup end
augroup filetypes " {{{2
    autocmd FileType html,htmldjango setlocal shiftwidth=2 softtabstop=2 tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2 tabstop=2
    autocmd FileType bib setlocal fdm=syntax
augroup end
augroup ft_mediawiki " {{{2
    autocmd BufNewFile,BufRead *.shoutwiki.com*.*.txt setlocal filetype=mediawiki
augroup end
augroup todo_files " {{{2
    autocmd BufNewFile,BufRead *.ol.txt setlocal noexpandtab tabstop=4 shiftwidth=4
augroup end
augroup ft_tex " {{{2
    autocmd BufNewFile,BufRead *.cls setlocal filetype=tex
augroup end
augroup ft_abc " {{{2
    autocmd BufNewFile,BufRead *.abc setlocal nospell commentstring=\%%s
augroup end
" augroup onnewfile " {{{2
"     " Try to find a template for our new file.
"     autocmd BufNewFile * silent! 0r $VIMHOME/templates/%:e.tpl
" augroup end
augroup line_return "{{{2
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup end
" Functions {{{1
" Named serial inc {{{2
function! UPDSERIAL(date, num)
	if (strftime("%Y%m%d") == a:date)
		return a:date . a:num+1
	endif
	return strftime("%Y%m%d") . '01'
endfunction

command Soa :%s/\(2[0-9]\{7}\)\([0-9]\{2}\)\s*;\s*serial/\=UPDSERIAL(submatch(1), submatch(2)) . '; serial'/gc
" Tab completion {{{2
"Use TAB for completing words.
"function! Tab_Or_Complete()
"    if col('.')>1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
"        return "\<C-N>"
"    else
"        return "\<Tab>"
"    endif
"endfunction
"
":inoremap<Tab> <C-R>=Tab_Or_Complete()<CR>
" Word processor mode {{{2
" Enter 'Word processor mode' by hitting :WP
" See http://www.drbunsen.org/writing-in-vim.html for mor information.
function! WordProcessorMode()
    setlocal formatoptions=l
    setlocal noexpandtab
    set complete+=s
    setlocal wrap
    setlocal linebreak
endfunction
com! WP cal WordProcessorMode()
" Highlight Word {{{2
" The following function was shamelessly ripped from Steve Losh's vimrc at
" https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc.
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195


" Pulse Line {{{2
" From Steve Losh's vimrc. For some reason though, this only works in terminal
" vim for me.

function! s:Pulse()
    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 8
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()
" Plugin settings {{{1
" Fugitive {{{2
set diffopt=vertical
" TeX {{{2
let g:tex_flavor='latex'
let g:tex_fold_enabled=0 " This might not be a plugin setting.
" latex-box {{{2
let g:LatexBox_bibtex_wild_spaces = 1 " \cite{Knuth 1981 == \cite{Knuth.*1981
let g:LatexBox_Folding = 0 " LaTeX structure folding
let g:LatexBox_fold_preamble = 1
let g:LatexBox_fold_envs = 1
let g:LatexBox_latexmk_async = 1 " Let latexmk run in the background
let g:LatexBox_latexmk_preview_continuously = 0 " Compile on write
let g:LatexBox_quickfix = 2 " Don't steal the cursor

" Synctex {{{2
let g:LatexBox_latexmk_options = "-pdflatex='pdflatex -synctex=1 \%O \%S'"
map <silent> <Leader>ls :silent
    \ !/Applications/Skim.app/Contents/SharedSupport/displayline
    \ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>"
    \ "%:p" <CR>
" Jekyll {{{2
let g:jekyll_path='/Users/sjk/Code/blog'
let g:jekyll_post_suffix = 'md'
" Surround {{{2
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
augroup surround_django
    " type 'Sv' or 'S{' for a variable
    " type 'Sb' for a block
    " type 'Si' for an if statement
    " type 'Sw' for a with statement
    " type 'Sc' for a comment
    " type 'Sf' for a for statement
    " type 'S%' for other template tags
    autocmd FileType htmldjango let b:surround_{char2nr("v")} = "{{ \r }}"
    autocmd FileType htmldjango let b:surround_{char2nr("{")} = "{{ \r }}"
    autocmd FileType htmldjango let b:surround_{char2nr("%")} = "{% \r %}"
    autocmd FileType htmldjango let b:surround_{char2nr("b")} = "{% block \1block name: \1 %}\r{% endblock \1\1 %}"
    autocmd FileType htmldjango let b:surround_{char2nr("i")} = "{% if \1condition: \1 %}\r{% endif %}"
    autocmd FileType htmldjango let b:surround_{char2nr("w")} = "{% with \1with: \1 %}\r{% endwith %}"
    autocmd FileType htmldjango let b:surround_{char2nr("f")} = "{% for \1for loop: \1 %}\r{% endfor %}"
    autocmd FileType htmldjango let b:surround_{char2nr("c")} = "{% comment %}\r{% endcomment %}"
augroup end

" Gist {{{2
let g:gist_clip_command = 'pbcopy'
" NERDTree {{{2
let NERDTreeIgnore=['\~$', '\.aux$', '\.bbl$', '\.bcf$', '\.blg$', '\.pdf$', '\.run\.xml$', '\.toc$', '\.out$', '\.pyc$']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeChDirMode = 2
" Airline {{{2
let g:airline_theme='badwolf' " Status bar theme
let g:airline_powerline_fonts = 1
" Python-mode {{{2
" Python-mode is fucking about so I'm trying Steve Losh's settings.
let g:pymode_doc = 1
let g:pymode_doc_bind = 'M'
let g:pydoc = 'pydoc'
let g:pymode_syntax = 1
let g:pymode_syntax_all = 0
let g:pymode_syntax_builtin_objs = 1
let g:pymode_syntax_print_as_function = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_run = 0
let g:pymode_lint = 0
let g:pymode_breakpoint = 0
let g:pymode_utils_whitespaces = 0
let g:pymode_virtualenv = 0
let g:pymode_folding = 1

let g:pymode_options_indent = 0
let g:pymode_options_fold = 0
let g:pymode_options_other = 0
let g:pymode_options = 0

let g:pymode_rope = 0
let g:pymode_rope_global_prefix = "<localleader>R"
let g:pymode_rope_local_prefix = "<localleader>r"
let g:pymode_rope_auto_project = 1
let g:pymode_rope_enable_autoimport = 0
let g:pymode_rope_autoimport_generate = 1
let g:pymode_rope_autoimport_underlineds = 0
let g:pymode_rope_codeassist_maxfixes = 10
let g:pymode_rope_sorted_completions = 1
let g:pymode_rope_extended_complete = 1
let g:pymode_rope_autoimport_modules = ["os", "shutil", "datetime"]
let g:pymode_rope_confirm_saving = 1
let g:pymode_rope_vim_completion = 1
let g:pymode_rope_guess_project = 1
let g:pymode_rope_goto_def_newwin = 0
let g:pymode_rope_always_show_complete_menu = 0


" let g:pymode = 1
" let g:pymode_options = 1
" let g:pymode_quickfix_minheight = 3
" let g:pymode_quickfix_maxheight = 6
" let g:pymode_virtualenv = 1
" let g:pymode_indent = 1
" let g:pymode_folding = 1
" let g:pymode_motion = 1
" let g:pymode_doc = 0
" let g:pymode_doc_bind = 'K'
" let g:pymode_run = 1
" let g:pymode_run_bind = '<leader>r'
" let g:pymode_lint = 1
" let g:pymode_lint_on_write = 1
" let g:pymode_lint_checkers = ['pyflakes', 'pep8']
" let g:pymode_lint_ignore = 'E501'
" let g:pymode_syntax = 1

nnoremap <leader>pl :PymodeLint<cr>
nnoremap <leader>pla :PymodeLintAuto<cr>


"Syntastic {{{2
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_enable_signs = 1
let g:syntastic_check_on_open = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 0
let g:syntastic_python_python_exec = 'python3'

nnoremap <leader>C :SyntasticCheck<cr>

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers = ['flake8', 'pep8', 'pydocstyle']
let g:syntastic_python_flake8_args = '--select=F,C9 --max-complexity=10'

let g:syntastic_mode_map = {
       \ "mode": "active",
       \ "active_filetypes": [] }
" Sparkup {{{2
let g:sparkupExecuteMapping = '<c-e>'
let g:sparkupNextMapping = '<c-m>'
" Pandoc {{{2
let g:pandoc#biblio#use_bibtool = 1
" UltiSnips {{{2
let g:ultisnips_python_style = 'sphinx'
let g:UltiSnipsExpandTrigger = '<c-t>'
let g:UltiSnipsListSnippets = '<c-l>'

" YouCompleteMe {{{2
nnoremap <leader>y :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>pd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>pc :YcmCompleter GoToDeclaration<CR>
" PyTest {{{2
nmap <silent><leader>pf <Esc>:Pytest file<cr>
nmap <silent><leader>pc <Esc>:Pytest class<cr>
nmap <silent><leader>pm <Esc>:Pytest method<cr>
" isort {{{2
" let g:vim_isort_map = '<leader>is'
" Source external files {{{1
    "source $VIMHOME/autocorrect.vim          " Common misspellings
"1}}}
